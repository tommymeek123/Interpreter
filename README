Western Carolina University
CS352 - Organization of Programming Languages
Project 3: Interpreter
Justin Clifton and Tommy Meek
April 2020

To compile, type the following command into a terminal: 
gcc interpreter.c parser.c tokenizer.c -lm -o interpreter

To run the executable you just created, type the following: 
./interpreter <input_filename> <output_filename>

This program acts as a syntax analyzer or parser. It reads a text file, parses 
its contents into statements, and creates an output file that lists each 
statement and indicates whether each statement is syntactically correct 
according to a given language. Additionally, the program will evaluate the 
result of each statement (Only simple arithmetic operations are supported as 
statements). In this way, the program is actually a complete interpreter, 
parsing then evaluating each statement line by line.

The language used is generated by a context-free grammar with the following 
production rules:
<bexpr>       ->  <expr> ;
<expr>        ->  <term> <ttail>
<ttail>       ->  <add_sub_tok> <term> <ttail> | e
<term>        ->  <stmt> <stail>
<stail>       ->  <mult_div_tok> <stmt> <stail> | e
<stmt>        ->  <factor> <ftail>
<ftail>       ->  <compare_tok> <factor> <ftail> | e
<factor>      ->  <expp> ^ <factor> | <expp>
<expp>        ->  ( <expr> ) | <num>
<add_sub_tok> ->  + | -
<mul_div_tok> ->  * | /
<compare_tok> ->  < | > | <= | >= | != | ==
<num>         ->  {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9}+
